{
  "name": "elive2025-term-enrolled",
  "parameters": [
    {
      "name": "ethosApiKey",
      "type": "string",
      "required": true,
      "sensitive": true
    },
    {
      "name": "termCode",
      "type": "string",
      "default": "202520"
    }
  ],
  "apiDefinition": {
    "authType": "userToken",
    "httpVerb": "GET",
    "outputSchema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "enrolled": {
          "type": "integer",
          "title": "Enrolled"
        }
      }
    }
  },
  "pipeline": [
    "Get term-enrollments",
    "JavaScript Transform"
  ],
  "segments": {
    "Get term-enrollments": {
      "class": "ethosProxyGetFilter",
      "config": {
        "resource": "term-enrollments",
        "filter": "?criteria={\"termCode\":\"{{context.termCode}}\"}",
        "acceptVersions": [
          "1"
        ],
        "cache": false,
        "queryByPost": false,
        "ignoreErrors": false
      }
    },
    "JavaScript Transform": {
      "class": "JavaScriptTransform",
      "config": {
        "pushUndefined": true,
        "stopOnError": false,
        "draft": false,
        "code": "function transform (message, context) {\n  const { payload: data } = message;\n  \n  const count = data.filter(enrollment => enrollment.enrollmentStatusIncludedInHeadcount === true);\n  const result = { enrolled: data.length };\n  \n  /*\n  if (Array.isArray(data) && data.length === 1) {\n    const [ sgpAverages ] = data;\n    result.studentId = sgpAverages?.student?.id;\n    const cumulativeAll = sgpAverages?.cumulative.find(average => average?.academicSource === 'all');\n    Object.assign(result, cumulativeAll);\n    \n    // clean up the result\n    result.gpa = result.value;\n    delete result.value;\n    delete result.academicLevel;\n    delete result.academicSource;\n  }\n  */\n\n  return {\n    payload: result\n  }\n}\n"
      }
    }
  }
}